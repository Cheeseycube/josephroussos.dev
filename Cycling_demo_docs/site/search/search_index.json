{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The PCS Filter Tool is a software package that performs three primary tasks:</p> <ol> <li>Web-scraping statistics about professional women cyclers from www.procyclingstats.com</li> <li>Building and maintaining a SQL database containing cleaned web-scraped data.</li> <li>Providing a front-end for users to query the database with a number of filters</li> </ol>"},{"location":"#the-scraper","title":"The Scraper","text":"<p>Web-scraping is handled by several classes located in Scraper.py. Within Scraper.py there are two general techniques for scraping.</p>"},{"location":"#in-house-scraping","title":"In-House Scraping","text":"<p>Methods such as RaceScraper.getRaceInfo() utilize our own scraping algorithm that relies on a python package called selectolax to handle html parsing. Any errors that occur during scraping will be outputted to <code>logs/error.log</code>.</p>"},{"location":"#scraping-via-procyclingstats","title":"Scraping via Procyclingstats","text":"<p>Methods such as RiderScraper.getRiderInfo() utilize a python package called procyclingstats to handle web scraping. This package is open-source and made to scrape this specific website. Internally, selectolax is still used, so a familiarity with this package will prove helpful for debugging. NOTE: A static copy of the procyclingstats package is used as opposed to the latest version from pypi. The CBA team made this concession because unfortunately the latest version of this package tends to have bugs and missing features that aren't addressed in a timely manner. To that end, we have customized  the package with a few new features and bug fixes. A full list of changes to the original package are listed below * <code>procyclingstats/rider_scraper.birthdate()</code>: CBA team added a special case for those with only year * <code>procyclingstats/rider_scraper.age()</code>: CBA team added this new method * <code>procyclingstats/table_parser._filter_a_elements()</code>: CBA team added a conditional for national races</p>"},{"location":"#the-database","title":"The Database","text":""},{"location":"#dbbuilder","title":"dbBuilder","text":"<p>This is the heart of the database where there exist methods to build and update each table. Duplicates are automatically ignored, and if a table doesn't exist yet it will be created.</p>"},{"location":"#dbupdater","title":"dbUpdater","text":"<p>This is a simple script that can be scheduled to run as often as you want--we recommend at least once a day--and will keep the database up-to-date. By default, <code>dbUpdater</code> sends log data to <code>logs/update.log</code>, but that could easily be piped somewhere else.</p>"},{"location":"#datacleaner","title":"dataCleaner","text":"<p>Finally, it is important to note that scraped data is first sent through various cleaning methods located in <code>dataCleaner.py</code> before being sent to <code>dbBuilder</code>.</p>"},{"location":"#the-front-end","title":"The Front-End","text":""},{"location":"#flask-app","title":"Flask App","text":"<p>The front-end is powered by a simple python Flask app located in <code>app.py</code>. The app renders a home page that allows a user to select various filters and submit them through a form.</p>"},{"location":"#querybuilder","title":"queryBuilder","text":"<p><code>queryBuilder.py</code> takes in a list of filters provided by the user, and constructs/executes a corresponding sql query. The returned filtered list of riders is then displayed to the user by the Flask App.</p>"},{"location":"Scraper-reference/","title":"Scraper","text":""},{"location":"Scraper-reference/#source-code-is-kept-private-but-the-following-documentation-is-still-viewable","title":"Source code is kept private, but the following documentation is still viewable:","text":"<ul> <li>overview</li> <li>error handling</li> <li>database schema</li> <li>database tests</li> <li>queryBuilder tests</li> <li>Scraper tests</li> <li>user guide</li> <li>Documentation Maintenance</li> </ul>"},{"location":"Scraper_tests-reference/","title":"Scraper_tests","text":""},{"location":"Scraper_tests-reference/#Scraper_tests.Test_RaceScraper","title":"<code>Test_RaceScraper</code>","text":"<p>               Bases: <code>TestCase</code></p> <p>Race Scraper tests.</p> Source code in <code>tests\\Scraper_tests.py</code> <pre><code>class Test_RaceScraper(unittest.TestCase):\n    \"\"\"\n    Race Scraper tests.\n    \"\"\"\n    def test_getRiderRaceResults_async(self, threshold: float = .90):\n        \"\"\"\n        Tests [getRiderRaceResults_async()](../Scraper-reference/#Scraper.RaceScraper.getRiderRaceResults_async) by ensuring that each field\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            threshold: Percent (expressed as a decimal) of each field that must be valid.\n        \"\"\"\n        curr_year = datetime.today().year\n        race_scraper = RaceScraper()\n        race_results = race_scraper.getRiderRaceResults_async(startyear=curr_year - 1, endyear=curr_year)\n        integrity = dbUpdater.check_integrity(race_results)\n        for key, value in integrity.items():\n            self.assertGreaterEqual(value, threshold)\n\n    def test_getRaceInfo(self, high_threshold: float = .90, medium_threshold: float = .70, low_threshold: float = .60):\n        \"\"\"\n        Tests [getRaceInfo()](../Scraper-reference/#Scraper.RaceScraper.getRaceInfo) by ensuring that each field\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            high_threshold: Percent (expressed as a decimal) of each field in `high_integrity_fields` that must be valid.\n            medium_threshold: Percent (expressed as a decimal) of each field in `medium_integrity_fields` that must be valid.\n            low_threshold: Percent (expressed as a decimal) of each field in `low_integrity_fields` that must be valid.\n        \"\"\"\n        curr_year = datetime.today().year\n        race_scraper = RaceScraper()\n        race_info = race_scraper.getRaceInfo(startyear=curr_year - 1, endyear=curr_year)\n        integrity = dbUpdater.check_integrity(race_info)\n        # these fields typically have very high integrity\n        high_integrity_fields = ['race_url', 'is_total_results_page', 'class', 'parcour_type', 'Date',  'Distance']\n        # these fields typically have medium integrity\n        medium_integrity_fields = ['Race ranking', 'Startlist quality score']\n        # these fields typically have low integrity\n        low_integrity_fields = ['ProfileScore', 'Vertical meters']\n        for key, value in integrity.items():\n            print(f\"{key}: {value}\")\n            if key in high_integrity_fields:\n                self.assertGreaterEqual(value, high_threshold)\n            if key in medium_integrity_fields:\n                self.assertGreaterEqual(value, medium_threshold)\n            if key in low_integrity_fields:\n                self.assertGreaterEqual(value, low_threshold)\n</code></pre>"},{"location":"Scraper_tests-reference/#Scraper_tests.Test_RaceScraper.test_getRaceInfo","title":"<code>test_getRaceInfo(high_threshold=0.9, medium_threshold=0.7, low_threshold=0.6)</code>","text":"<p>Tests getRaceInfo() by ensuring that each field returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>high_threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field in <code>high_integrity_fields</code> that must be valid.</p> <code>0.9</code> <code>medium_threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field in <code>medium_integrity_fields</code> that must be valid.</p> <code>0.7</code> <code>low_threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field in <code>low_integrity_fields</code> that must be valid.</p> <code>0.6</code> Source code in <code>tests\\Scraper_tests.py</code> <pre><code>def test_getRaceInfo(self, high_threshold: float = .90, medium_threshold: float = .70, low_threshold: float = .60):\n    \"\"\"\n    Tests [getRaceInfo()](../Scraper-reference/#Scraper.RaceScraper.getRaceInfo) by ensuring that each field\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        high_threshold: Percent (expressed as a decimal) of each field in `high_integrity_fields` that must be valid.\n        medium_threshold: Percent (expressed as a decimal) of each field in `medium_integrity_fields` that must be valid.\n        low_threshold: Percent (expressed as a decimal) of each field in `low_integrity_fields` that must be valid.\n    \"\"\"\n    curr_year = datetime.today().year\n    race_scraper = RaceScraper()\n    race_info = race_scraper.getRaceInfo(startyear=curr_year - 1, endyear=curr_year)\n    integrity = dbUpdater.check_integrity(race_info)\n    # these fields typically have very high integrity\n    high_integrity_fields = ['race_url', 'is_total_results_page', 'class', 'parcour_type', 'Date',  'Distance']\n    # these fields typically have medium integrity\n    medium_integrity_fields = ['Race ranking', 'Startlist quality score']\n    # these fields typically have low integrity\n    low_integrity_fields = ['ProfileScore', 'Vertical meters']\n    for key, value in integrity.items():\n        print(f\"{key}: {value}\")\n        if key in high_integrity_fields:\n            self.assertGreaterEqual(value, high_threshold)\n        if key in medium_integrity_fields:\n            self.assertGreaterEqual(value, medium_threshold)\n        if key in low_integrity_fields:\n            self.assertGreaterEqual(value, low_threshold)\n</code></pre>"},{"location":"Scraper_tests-reference/#Scraper_tests.Test_RaceScraper.test_getRiderRaceResults_async","title":"<code>test_getRiderRaceResults_async(threshold=0.9)</code>","text":"<p>Tests getRiderRaceResults_async() by ensuring that each field returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field that must be valid.</p> <code>0.9</code> Source code in <code>tests\\Scraper_tests.py</code> <pre><code>def test_getRiderRaceResults_async(self, threshold: float = .90):\n    \"\"\"\n    Tests [getRiderRaceResults_async()](../Scraper-reference/#Scraper.RaceScraper.getRiderRaceResults_async) by ensuring that each field\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        threshold: Percent (expressed as a decimal) of each field that must be valid.\n    \"\"\"\n    curr_year = datetime.today().year\n    race_scraper = RaceScraper()\n    race_results = race_scraper.getRiderRaceResults_async(startyear=curr_year - 1, endyear=curr_year)\n    integrity = dbUpdater.check_integrity(race_results)\n    for key, value in integrity.items():\n        self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"Scraper_tests-reference/#Scraper_tests.Test_RiderScraper","title":"<code>Test_RiderScraper</code>","text":"<p>               Bases: <code>TestCase</code></p> <p>Rider Scraper tests.</p> Source code in <code>tests\\Scraper_tests.py</code> <pre><code>class Test_RiderScraper(unittest.TestCase):\n    \"\"\"\n    Rider Scraper tests.\n    \"\"\"\n    def test_getRiderInfo(self, threshold: float =.90):\n        \"\"\"\n        Tests [getRiderInfo()](../Scraper-reference/#Scraper.RiderScraper.getRiderInfo) by ensuring that each field\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            threshold: Percent (expressed as a decimal) of each field that must be valid.\n        \"\"\"\n        rider_scraper = RiderScraper()\n        rider_scraper.populate_rider_urls()\n        rider_info = rider_scraper.getRiderInfo()\n        cleaned_rider_info = dataCleaner.clean_rider_info(rider_info)\n        integrity = dbUpdater.check_integrity(cleaned_rider_info)\n        for key, value in integrity.items():\n            self.assertGreaterEqual(value, threshold)\n\n    def test_team_history(self, threshold: float = .90):\n        \"\"\"\n        Tests the `team_history` field returned by [getRiderInfo()](../Scraper-reference/#Scraper.RiderScraper.getRiderInfo) by ensuring it\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            threshold: Percent (expressed as a decimal) of each field that must be valid.\n        \"\"\"\n        rider_scraper = RiderScraper()\n        rider_scraper.populate_rider_urls()\n        rider_info = rider_scraper.getRiderInfo()\n        cleaned_rider_info = dataCleaner.clean_rider_info(rider_info)\n        all_team_history = []\n        for row in cleaned_rider_info:\n            all_team_history.extend(row['team_history'])\n        integrity = dbUpdater.check_integrity(all_team_history)\n        for key, value in integrity.items():\n            self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"Scraper_tests-reference/#Scraper_tests.Test_RiderScraper.test_getRiderInfo","title":"<code>test_getRiderInfo(threshold=0.9)</code>","text":"<p>Tests getRiderInfo() by ensuring that each field returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field that must be valid.</p> <code>0.9</code> Source code in <code>tests\\Scraper_tests.py</code> <pre><code>def test_getRiderInfo(self, threshold: float =.90):\n    \"\"\"\n    Tests [getRiderInfo()](../Scraper-reference/#Scraper.RiderScraper.getRiderInfo) by ensuring that each field\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        threshold: Percent (expressed as a decimal) of each field that must be valid.\n    \"\"\"\n    rider_scraper = RiderScraper()\n    rider_scraper.populate_rider_urls()\n    rider_info = rider_scraper.getRiderInfo()\n    cleaned_rider_info = dataCleaner.clean_rider_info(rider_info)\n    integrity = dbUpdater.check_integrity(cleaned_rider_info)\n    for key, value in integrity.items():\n        self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"Scraper_tests-reference/#Scraper_tests.Test_RiderScraper.test_team_history","title":"<code>test_team_history(threshold=0.9)</code>","text":"<p>Tests the <code>team_history</code> field returned by getRiderInfo() by ensuring it returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field that must be valid.</p> <code>0.9</code> Source code in <code>tests\\Scraper_tests.py</code> <pre><code>def test_team_history(self, threshold: float = .90):\n    \"\"\"\n    Tests the `team_history` field returned by [getRiderInfo()](../Scraper-reference/#Scraper.RiderScraper.getRiderInfo) by ensuring it\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        threshold: Percent (expressed as a decimal) of each field that must be valid.\n    \"\"\"\n    rider_scraper = RiderScraper()\n    rider_scraper.populate_rider_urls()\n    rider_info = rider_scraper.getRiderInfo()\n    cleaned_rider_info = dataCleaner.clean_rider_info(rider_info)\n    all_team_history = []\n    for row in cleaned_rider_info:\n        all_team_history.extend(row['team_history'])\n    integrity = dbUpdater.check_integrity(all_team_history)\n    for key, value in integrity.items():\n        self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"app-reference/","title":"App","text":""},{"location":"app-reference/#source-code-is-kept-private-but-the-following-documentation-is-still-viewable","title":"Source code is kept private, but the following documentation is still viewable:","text":"<ul> <li>overview</li> <li>error handling</li> <li>database schema</li> <li>database tests</li> <li>queryBuilder tests</li> <li>Scraper tests</li> <li>user guide</li> <li>Documentation Maintenance</li> </ul>"},{"location":"dataCleaner-reference/","title":"dataCleaner","text":""},{"location":"dataCleaner-reference/#source-code-is-kept-private-but-the-following-documentation-is-still-viewable","title":"Source code is kept private, but the following documentation is still viewable:","text":"<ul> <li>overview</li> <li>error handling</li> <li>database schema</li> <li>database tests</li> <li>queryBuilder tests</li> <li>Scraper tests</li> <li>user guide</li> <li>Documentation Maintenance</li> </ul>"},{"location":"database-schema/","title":"Cycling database","text":""},{"location":"database-schema/#er-diagram","title":"ER Diagram","text":""},{"location":"database-schema/#schema","title":"Schema","text":""},{"location":"database-schema/#race_info","title":"race_info","text":"<ul> <li>race_url: <code>VARCHAR(255)</code> PRIMARY KEY</li> <li>is_total_results_page: <code>BOOL</code></li> <li>class: <code>TEXT</code></li> <li>parcour_type: <code>TEXT</code></li> <li>date: <code>DATE</code></li> <li>distance: <code>FLOAT</code></li> <li>profile_score: <code>FLOAT</code></li> <li>vertical_meters: <code>FLOAT</code></li> <li>race_ranking: <code>INT</code></li> <li>startlist_quality_score: <code>INT</code></li> </ul>"},{"location":"database-schema/#race_results","title":"race_results","text":"<ul> <li>race_rider_url: <code>VARCHAR(255)</code> PRIMARY KEY</li> <li>race_url: <code>VARCHAR(255)</code> FOREIGN KEY REFERENCES race_info.race_url</li> <li>rider_url: <code>VARCHAR(255)</code> FOREIGN KEY REFERENCES rider_info.rider_url</li> <li>placement: <code>INT</code></li> <li>pcs_points: <code>INT</code></li> <li>uci_points: <code>INT</code></li> <li>gc_position: <code>INT</code></li> </ul>"},{"location":"database-schema/#rider_info","title":"rider_info","text":"<ul> <li>rider_url: <code>VARCHAR(255)</code> PRIMARY KEY</li> <li>name: <code>TEXT</code></li> <li>nationality: <code>TEXT</code></li> <li>current_team: <code>VARCHAR(255)</code> FOREIGN KEY REFERENCES team_info.team_url</li> <li>birthdate: <code>DATE</code></li> <li>age: <code>INT</code></li> </ul>"},{"location":"database-schema/#team_info","title":"team_info","text":"<ul> <li>team_url: <code>VARCHAR(255)</code> PRIMARY KEY</li> <li>name: <code>TEXT</code></li> <li>class: <code>TEXT</code></li> </ul>"},{"location":"database-schema/#team_history","title":"team_history","text":"<ul> <li>rider_team_season: <code>VARCHAR(255)</code> PRIMARY KEY</li> <li>rider_url: <code>VARCHAR(255)</code> FOREIGN KEY REFERENCES rider_info.rider_url</li> <li>team_url: <code>VARCHAR(255)</code> FOREIGN KEY REFERENCES team_info.team_url</li> <li>class: <code>TEXT</code></li> <li>season: <code>INT</code></li> </ul>"},{"location":"dbBuilder-reference/","title":"dbBuilder","text":""},{"location":"dbBuilder-reference/#source-code-is-kept-private-but-the-following-documentation-is-still-viewable","title":"Source code is kept private, but the following documentation is still viewable:","text":"<ul> <li>overview</li> <li>error handling</li> <li>database schema</li> <li>database tests</li> <li>queryBuilder tests</li> <li>Scraper tests</li> <li>user guide</li> <li>Documentation Maintenance</li> </ul>"},{"location":"dbUpdater-reference/","title":"dbUpdater","text":""},{"location":"dbUpdater-reference/#source-code-is-kept-private-but-the-following-documentation-is-still-viewable","title":"Source code is kept private, but the following documentation is still viewable:","text":"<ul> <li>overview</li> <li>error handling</li> <li>database schema</li> <li>database tests</li> <li>queryBuilder tests</li> <li>Scraper tests</li> <li>user guide</li> <li>Documentation Maintenance</li> </ul>"},{"location":"db_tests-reference/","title":"db_tests","text":""},{"location":"db_tests-reference/#db_tests.Test_integrity","title":"<code>Test_integrity</code>","text":"<p>               Bases: <code>TestCase</code></p> <p>Tests the integrity of each table in the cycling db. \"Integrity\" in this case is the proportion of values that are null or empty compared to the total number of rows in a given table. eg: .90 means 90% of data for a given column is valid--meaning not null or empty</p> Source code in <code>tests\\db_tests.py</code> <pre><code>class Test_integrity(unittest.TestCase):\n    \"\"\"\n    Tests the integrity of each table in the cycling db.\n    \"Integrity\" in this case is the proportion of values that are null or empty\n    compared to the total number of rows in a given table.\n    eg: .90 means 90% of data for a given column is valid--meaning not null or empty\n    \"\"\"\n    def test_race_info(self, high_threshold: float = .90, medium_threshold: float = .70, low_threshold: float = .60):\n        \"\"\"\n        Tests the [race_info](../database-schema/#race_info) table by ensuring that each field\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            high_threshold: Percent (expressed as a decimal) of each field in `high_integrity_fields` that must be valid.\n            medium_threshold: Percent (expressed as a decimal) of each field in `medium_integrity_fields` that must be valid.\n            low_threshold: Percent (expressed as a decimal) of each field in `low_integrity_fields` that must be valid.\n        \"\"\"\n        builder = queryBuilder()\n        cursor = builder.cycling_db.cursor()\n        testQuery = \"\"\"SELECT * FROM race_info\"\"\"\n        cursor.execute(testQuery)\n        res = list(cursor.fetchall())\n        cursor.close()\n        formatted_data = []\n        for row in res:\n            formatted_data.append(\n                {\n                    'race_url': row[0],\n                    'is_total_results_page': row[1],\n                    'class': row[2],\n                    'parcour_type': row[3],\n                    'date': row[4],\n                    'distance': row[5],\n                    'profile_score': row[6],\n                    'vertical_meters': row[7],\n                    'race_ranking': row[8],\n                    'startlist_quality_score': row[9]\n                }\n            )\n        integrity = dbUpdater.check_integrity(formatted_data)\n        # these fields typically have very high integrity\n        high_integrity_fields = ['race_url', 'is_total_results_page', 'class', 'parcour_type', 'Date', 'Distance']\n        # these fields typically have medium integrity\n        medium_integrity_fields = ['Race ranking', 'Startlist quality score']\n        # these fields typically have low integrity\n        low_integrity_fields = ['ProfileScore', 'Vertical meters']\n        for key, value in integrity.items():\n            print(f\"{key}: {value}\")\n            if key in high_integrity_fields:\n                self.assertGreaterEqual(value, high_threshold)\n            if key in medium_integrity_fields:\n                self.assertGreaterEqual(value, medium_threshold)\n            if key in low_integrity_fields:\n                self.assertGreaterEqual(value, low_threshold)\n\n    def test_race_results(self, threshold: float = .85):\n        \"\"\"\n        Tests the [race_results](../database-schema/#race_results) table by ensuring that each field\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            threshold: Percent (expressed as a decimal) of each field that must be valid.\n        \"\"\"\n        builder = queryBuilder()\n        cursor = builder.cycling_db.cursor()\n        testQuery = \"\"\"SELECT * FROM race_results\"\"\"\n        cursor.execute(testQuery)\n        res = list(cursor.fetchall())\n        cursor.close()\n        formatted_data = []\n        for row in res:\n            formatted_data.append(\n                {\n                    'race_rider_url': row[0],\n                    'race_url': row[1],\n                    'rider_url': row[2],\n                    'placement': row[3],\n                    'pcs_points': row[4],\n                    'uci_points': row[5],\n                    'gc_position': row[6]\n                }\n            )\n\n        integrity = dbUpdater.check_integrity(formatted_data)\n        for key, value in integrity.items():\n            print(f\"{key}: {value}\")\n            self.assertGreaterEqual(value, threshold)\n\n    def test_rider_info(self, threshold: float = .90):\n        \"\"\"\n        Tests the [rider_info](../database-schema/#rider_info) table by ensuring that each field\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            threshold: Percent (expressed as a decimal) of each field that must be valid.\n        \"\"\"\n        builder = queryBuilder()\n        cursor = builder.cycling_db.cursor()\n        testQuery = \"\"\"SELECT * FROM rider_info\"\"\"\n        cursor.execute(testQuery)\n        res = list(cursor.fetchall())\n        cursor.close()\n        formatted_data = []\n        for row in res:\n            formatted_data.append(\n                {\n                    'rider_url': row[0],\n                    'name': row[1],\n                    'nationality': row[2],\n                    'current_team': row[3],\n                    'birthdate': row[4],\n                    'age': row[5]\n                }\n            )\n        integrity = dbUpdater.check_integrity(formatted_data)\n        for key, value in integrity.items():\n            self.assertGreaterEqual(value, threshold)\n\n    def test_team_info(self, threshold: float = .90):\n        \"\"\"\n        Tests the [team_info](../database-schema/#team_info) table by ensuring that each field\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            threshold: Percent (expressed as a decimal) of each field that must be valid.\n        \"\"\"\n        builder = queryBuilder()\n        cursor = builder.cycling_db.cursor()\n        testQuery = \"\"\"SELECT * FROM team_info\"\"\"\n        cursor.execute(testQuery)\n        res = list(cursor.fetchall())\n        cursor.close()\n        formatted_data = []\n        for row in res:\n            formatted_data.append(\n                {\n                    'team_url': row[0],\n                    'name': row[1],\n                    'class': row[2]\n                }\n            )\n        integrity = dbUpdater.check_integrity(formatted_data)\n        for key, value in integrity.items():\n            self.assertGreaterEqual(value, threshold)\n\n    def test_team_history(self, threshold: float = .90):\n        \"\"\"\n        Tests the [team_history](../database-schema/#team_history) table by ensuring that each field\n        returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n        Args:\n            threshold: Percent (expressed as a decimal) of each field that must be valid.\n        \"\"\"\n        builder = queryBuilder()\n        cursor = builder.cycling_db.cursor()\n        testQuery = \"\"\"SELECT * FROM team_history\"\"\"\n        cursor.execute(testQuery)\n        res = list(cursor.fetchall())\n        cursor.close()\n        formatted_data = []\n        for row in res:\n            formatted_data.append(\n                {\n                    'rider_team_season': row[0],\n                    'rider_url': row[1],\n                    'team_url': row[2],\n                    'class': row[3],\n                    'season': row[4]\n                }\n            )\n        integrity = dbUpdater.check_integrity(formatted_data)\n        for key, value in integrity.items():\n            self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"db_tests-reference/#db_tests.Test_integrity.test_race_info","title":"<code>test_race_info(high_threshold=0.9, medium_threshold=0.7, low_threshold=0.6)</code>","text":"<p>Tests the race_info table by ensuring that each field returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>high_threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field in <code>high_integrity_fields</code> that must be valid.</p> <code>0.9</code> <code>medium_threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field in <code>medium_integrity_fields</code> that must be valid.</p> <code>0.7</code> <code>low_threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field in <code>low_integrity_fields</code> that must be valid.</p> <code>0.6</code> Source code in <code>tests\\db_tests.py</code> <pre><code>def test_race_info(self, high_threshold: float = .90, medium_threshold: float = .70, low_threshold: float = .60):\n    \"\"\"\n    Tests the [race_info](../database-schema/#race_info) table by ensuring that each field\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        high_threshold: Percent (expressed as a decimal) of each field in `high_integrity_fields` that must be valid.\n        medium_threshold: Percent (expressed as a decimal) of each field in `medium_integrity_fields` that must be valid.\n        low_threshold: Percent (expressed as a decimal) of each field in `low_integrity_fields` that must be valid.\n    \"\"\"\n    builder = queryBuilder()\n    cursor = builder.cycling_db.cursor()\n    testQuery = \"\"\"SELECT * FROM race_info\"\"\"\n    cursor.execute(testQuery)\n    res = list(cursor.fetchall())\n    cursor.close()\n    formatted_data = []\n    for row in res:\n        formatted_data.append(\n            {\n                'race_url': row[0],\n                'is_total_results_page': row[1],\n                'class': row[2],\n                'parcour_type': row[3],\n                'date': row[4],\n                'distance': row[5],\n                'profile_score': row[6],\n                'vertical_meters': row[7],\n                'race_ranking': row[8],\n                'startlist_quality_score': row[9]\n            }\n        )\n    integrity = dbUpdater.check_integrity(formatted_data)\n    # these fields typically have very high integrity\n    high_integrity_fields = ['race_url', 'is_total_results_page', 'class', 'parcour_type', 'Date', 'Distance']\n    # these fields typically have medium integrity\n    medium_integrity_fields = ['Race ranking', 'Startlist quality score']\n    # these fields typically have low integrity\n    low_integrity_fields = ['ProfileScore', 'Vertical meters']\n    for key, value in integrity.items():\n        print(f\"{key}: {value}\")\n        if key in high_integrity_fields:\n            self.assertGreaterEqual(value, high_threshold)\n        if key in medium_integrity_fields:\n            self.assertGreaterEqual(value, medium_threshold)\n        if key in low_integrity_fields:\n            self.assertGreaterEqual(value, low_threshold)\n</code></pre>"},{"location":"db_tests-reference/#db_tests.Test_integrity.test_race_results","title":"<code>test_race_results(threshold=0.85)</code>","text":"<p>Tests the race_results table by ensuring that each field returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field that must be valid.</p> <code>0.85</code> Source code in <code>tests\\db_tests.py</code> <pre><code>def test_race_results(self, threshold: float = .85):\n    \"\"\"\n    Tests the [race_results](../database-schema/#race_results) table by ensuring that each field\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        threshold: Percent (expressed as a decimal) of each field that must be valid.\n    \"\"\"\n    builder = queryBuilder()\n    cursor = builder.cycling_db.cursor()\n    testQuery = \"\"\"SELECT * FROM race_results\"\"\"\n    cursor.execute(testQuery)\n    res = list(cursor.fetchall())\n    cursor.close()\n    formatted_data = []\n    for row in res:\n        formatted_data.append(\n            {\n                'race_rider_url': row[0],\n                'race_url': row[1],\n                'rider_url': row[2],\n                'placement': row[3],\n                'pcs_points': row[4],\n                'uci_points': row[5],\n                'gc_position': row[6]\n            }\n        )\n\n    integrity = dbUpdater.check_integrity(formatted_data)\n    for key, value in integrity.items():\n        print(f\"{key}: {value}\")\n        self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"db_tests-reference/#db_tests.Test_integrity.test_rider_info","title":"<code>test_rider_info(threshold=0.9)</code>","text":"<p>Tests the rider_info table by ensuring that each field returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field that must be valid.</p> <code>0.9</code> Source code in <code>tests\\db_tests.py</code> <pre><code>def test_rider_info(self, threshold: float = .90):\n    \"\"\"\n    Tests the [rider_info](../database-schema/#rider_info) table by ensuring that each field\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        threshold: Percent (expressed as a decimal) of each field that must be valid.\n    \"\"\"\n    builder = queryBuilder()\n    cursor = builder.cycling_db.cursor()\n    testQuery = \"\"\"SELECT * FROM rider_info\"\"\"\n    cursor.execute(testQuery)\n    res = list(cursor.fetchall())\n    cursor.close()\n    formatted_data = []\n    for row in res:\n        formatted_data.append(\n            {\n                'rider_url': row[0],\n                'name': row[1],\n                'nationality': row[2],\n                'current_team': row[3],\n                'birthdate': row[4],\n                'age': row[5]\n            }\n        )\n    integrity = dbUpdater.check_integrity(formatted_data)\n    for key, value in integrity.items():\n        self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"db_tests-reference/#db_tests.Test_integrity.test_team_history","title":"<code>test_team_history(threshold=0.9)</code>","text":"<p>Tests the team_history table by ensuring that each field returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field that must be valid.</p> <code>0.9</code> Source code in <code>tests\\db_tests.py</code> <pre><code>def test_team_history(self, threshold: float = .90):\n    \"\"\"\n    Tests the [team_history](../database-schema/#team_history) table by ensuring that each field\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        threshold: Percent (expressed as a decimal) of each field that must be valid.\n    \"\"\"\n    builder = queryBuilder()\n    cursor = builder.cycling_db.cursor()\n    testQuery = \"\"\"SELECT * FROM team_history\"\"\"\n    cursor.execute(testQuery)\n    res = list(cursor.fetchall())\n    cursor.close()\n    formatted_data = []\n    for row in res:\n        formatted_data.append(\n            {\n                'rider_team_season': row[0],\n                'rider_url': row[1],\n                'team_url': row[2],\n                'class': row[3],\n                'season': row[4]\n            }\n        )\n    integrity = dbUpdater.check_integrity(formatted_data)\n    for key, value in integrity.items():\n        self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"db_tests-reference/#db_tests.Test_integrity.test_team_info","title":"<code>test_team_info(threshold=0.9)</code>","text":"<p>Tests the team_info table by ensuring that each field returns at least <code>threshold</code> % valid values, i.e. not <code>None</code> or <code>\"\"</code></p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>Percent (expressed as a decimal) of each field that must be valid.</p> <code>0.9</code> Source code in <code>tests\\db_tests.py</code> <pre><code>def test_team_info(self, threshold: float = .90):\n    \"\"\"\n    Tests the [team_info](../database-schema/#team_info) table by ensuring that each field\n    returns at least `threshold` % valid values, i.e. not `None` or `\"\"`\n\n    Args:\n        threshold: Percent (expressed as a decimal) of each field that must be valid.\n    \"\"\"\n    builder = queryBuilder()\n    cursor = builder.cycling_db.cursor()\n    testQuery = \"\"\"SELECT * FROM team_info\"\"\"\n    cursor.execute(testQuery)\n    res = list(cursor.fetchall())\n    cursor.close()\n    formatted_data = []\n    for row in res:\n        formatted_data.append(\n            {\n                'team_url': row[0],\n                'name': row[1],\n                'class': row[2]\n            }\n        )\n    integrity = dbUpdater.check_integrity(formatted_data)\n    for key, value in integrity.items():\n        self.assertGreaterEqual(value, threshold)\n</code></pre>"},{"location":"documentation_maintenance/","title":"Documentation Maintenance","text":"<p>The PCS Filter Tool Docs are built using mkdocs For help with updating the documentation see their docs on this subject To rebuild the documentation after changes are made type the following command into the terminal:</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"error_handling/","title":"Errors and other Messages","text":""},{"location":"error_handling/#scraper","title":"Scraper","text":"<p>When running the <code>Scraper</code>--such as in a daily <code>dbUpdater</code> run--all errors will be piped to <code>logs/error.log</code>. Most error messages will indicate the function they occurred in, as well as which statistic was affected. From there you can debug, but first it is recommended to rerun the code to see if the issue resolves. Web scraping is dependent on the website being scraped responding correctly, so every now and then a request will fall through the cracks. In the event that an error is persistent, the Scraper is designed to pull as much information as possible regardless.</p>"},{"location":"error_handling/#dbupdater","title":"dbUpdater","text":"<p><code>dbUpdater</code> logs messages to <code>logs/update.log</code>. Each time the main function in <code>dbUpdater</code> is called, The time is recorded along with how many riders and races were scraped. In addition, the logged messages indicate the \"integrity\" of the scraped data that was just pushed to the database.  For more details see dbUpdater.check_integrity().</p>"},{"location":"error_handling/#example-update-log-entry","title":"example update log entry","text":"<pre><code>2024-08-14 16:46:58.627886\nScraped 53078 races\nScraped 973 riders\n\nrace_results integrity:\nstage_url: 100.00%, result: 90.67%, pcs_points: 100.00%, uci_points: 100.00%, rider_url: 100.00%, \n\nrace_info integrity:\nrace_url: 100.00%, is_total_results_page: 100.00%, class: 100.00%, parcour_type: 100.00%, Date: 100.00%, Distance: 100.00%, ProfileScore: 68.17%, Vertical meters: 68.17%, Race ranking: 75.29%, Startlist quality score: 87.83%, \n\nrider_info integrity:\nrider_url: 100.00%, name: 100.00%, nationality: 100.00%, current_team: 100.00%, birthdate: 100.00%, age: 100.00%, \n\nteam history/info integrity:\nteam_url: 100.00%, season: 100.00%, team_name: 100.00%, class: 100.00%,\n</code></pre>"},{"location":"error_handling/#front-end","title":"Front-End","text":"<p>All Flask App run-time errors are outputted in the web-app itself with a full stack-trace, along with the list of filters that was attempted to be queried. Errors typically occur from a faulty filter, so it is recommended to copy-paste the filters from the error message and debug further separately.</p>"},{"location":"error_handling/#common-errors","title":"Common Errors","text":""},{"location":"error_handling/#error-scraping-races-from-httpswwwprocyclingstatscomridermieke-docx2022-in-getriderraceresults_async-nonetype-object-has-no-attribute-text","title":"error scraping races from: https://www.procyclingstats.com/rider/mieke-docx/2022 in getRiderRaceResults_async(): 'NoneType' object has no attribute 'text'","text":"<p>Errors such as this indicate the given url is empty or does not exist. In this specific example,  further investigation revealed that the given url was temporarily down on the website, so it appeared empty.  After some time, the url worked as normally again.  In other cases, the url may simply be invalid and will never work. The process of dealing with these errors could certainly be improved, but for now they are infrequent enough that they do not pose a major issue.</p>"},{"location":"error_handling/#error-code-500","title":"Error Code 500","text":"<p>If you see this error on the webpage, an uncaught error within the app is the cause. To pin down the exact problem, you will need to look at the generated stacktrace which should be visible on the webpage itself.</p>"},{"location":"overview/","title":"Overview","text":"<p>The PCS Filter Tool is a software package that performs three primary tasks:</p> <ol> <li>Web-scraping statistics about professional women cyclers from www.procyclingstats.com</li> <li>Building and maintaining a SQL database containing cleaned web-scraped data.</li> <li>Providing a front-end for users to query the database with a number of filters</li> </ol>"},{"location":"overview/#the-scraper","title":"The Scraper","text":"<p>Web-scraping is handled by several classes located in Scraper.py. Within Scraper.py there are two general techniques for scraping.</p>"},{"location":"overview/#in-house-scraping","title":"In-House Scraping","text":"<p>Methods such as RaceScraper.getRaceInfo() utilize our own scraping algorithm that relies on a python package called selectolax to handle html parsing. Any errors that occur during scraping will be outputted to <code>logs/error.log</code>.</p>"},{"location":"overview/#scraping-via-procyclingstats","title":"Scraping via Procyclingstats","text":"<p>Methods such as RiderScraper.getRiderInfo() utilize a python package called procyclingstats to handle web scraping. This package is open-source and made to scrape this specific website. Internally, selectolax is still used, so a familiarity with this package will prove helpful for debugging. NOTE: A static copy of the procyclingstats package is used as opposed to the latest version from pypi. The CBA team made this concession because unfortunately the latest version of this package tends to have bugs and missing features that aren't addressed in a timely manner. To that end, we have customized  the package with a few new features and bug fixes. A full list of changes to the original package are listed below * <code>procyclingstats/rider_scraper.birthdate()</code>: CBA team added a special case for those with only year * <code>procyclingstats/rider_scraper.age()</code>: CBA team added this new method * <code>procyclingstats/table_parser._filter_a_elements()</code>: CBA team added a conditional for national races</p>"},{"location":"overview/#the-database","title":"The Database","text":""},{"location":"overview/#dbbuilder","title":"dbBuilder","text":"<p>This is the heart of the database where there exist methods to build and update each table. Duplicates are automatically ignored, and if a table doesn't exist yet it will be created.</p>"},{"location":"overview/#dbupdater","title":"dbUpdater","text":"<p>This is a simple script that can be scheduled to run as often as you want--we recommend at least once a day--and will keep the database up-to-date. By default, <code>dbUpdater</code> sends log data to <code>logs/update.log</code>, but that could easily be piped somewhere else.</p>"},{"location":"overview/#datacleaner","title":"dataCleaner","text":"<p>Finally, it is important to note that scraped data is first sent through various cleaning methods located in <code>dataCleaner.py</code> before being sent to <code>dbBuilder</code>.</p>"},{"location":"overview/#the-front-end","title":"The Front-End","text":""},{"location":"overview/#flask-app","title":"Flask App","text":"<p>The front-end is powered by a simple python Flask app located in <code>app.py</code>. The app renders a home page that allows a user to select various filters and submit them through a form.</p>"},{"location":"overview/#querybuilder","title":"queryBuilder","text":"<p><code>queryBuilder.py</code> takes in a list of filters provided by the user, and constructs/executes a corresponding sql query. The returned filtered list of riders is then displayed to the user by the Flask App.</p>"},{"location":"queryBuilder-reference/","title":"queryBuilder","text":""},{"location":"queryBuilder-reference/#source-code-is-kept-private-but-the-following-documentation-is-still-viewable","title":"Source code is kept private, but the following documentation is still viewable:","text":"<ul> <li>overview</li> <li>error handling</li> <li>database schema</li> <li>database tests</li> <li>queryBuilder tests</li> <li>Scraper tests</li> <li>user guide</li> <li>Documentation Maintenance</li> </ul>"},{"location":"queryBuilder_tests-reference/","title":"queryBuilder_tests","text":""},{"location":"queryBuilder_tests-reference/#queryBuilder_tests.Test_queryBuilder","title":"<code>Test_queryBuilder</code>","text":"<p>               Bases: <code>TestCase</code></p> <p>Test Class for queryBuilder.py Contains tests for various example queries.</p> Source code in <code>tests\\queryBuilder_tests.py</code> <pre><code>class Test_queryBuilder(unittest.TestCase):\n    \"\"\"\n    Test Class for queryBuilder.py\n    Contains tests for various example queries.\n    \"\"\"\n\n    def test_bigBuilder_1(self):\n        \"\"\"\n        Select all riders aged 23 or less who have finished in the top ten in 1.1 races\n        with profile scores of 50 or greater\n        in the past 4 years\n        \"\"\"\n        # getting the builder's results for the given filters\n        curr_year = datetime.today().year\n        query_builder = queryBuilder()\n        builderRes = query_builder.bigBuilder(\n            [\n                {'table': 'race_info', 'column': 'year(date)', 'compare': '&gt;=', 'value': str(curr_year - 4)},\n                {'table': 'race_info', 'column': 'year(date)', 'compare': '&lt;=', 'value': str(curr_year)},\n                {'table': 'race_results', 'column': 'placement', 'compare': '&lt;=', 'value': '10'},\n                {'table': 'rider_info', 'column': 'age', 'compare': '&lt;=', 'value': '23'},\n                {'table': 'race_info', 'column': 'profile_score', 'compare': '&gt;=', 'value': '50'},\n                {'table': 'race_info', 'column': 'class', 'compare': '=', 'value': '1.1'}\n            ]\n        )\n        builderResList = [row[0] for row in builderRes]\n\n        # getting the results for an equivalent sql query\n        testQuery = f\"\"\"with\n            selected_races as (select race_url from race_info\n                                    where class  = \"1.1\" and profile_score &gt;= 50\n                                    and year(date) &gt;= {curr_year - 4} and year(date) &lt;= {curr_year}),\n            selected_results as (select rider_url from race_results\n                                    where race_url in (select selected_races.race_url from selected_races)\n                                        and placement &lt;= 10)\n        select * from rider_info where rider_url in (select rider_url from selected_results)\n                                    and age &lt;= 23;\"\"\"\n        cursor = query_builder.cycling_db.cursor()\n        cursor.execute(testQuery)\n        testQueryRes = cursor.fetchall()\n        testQueryResList = [row[0] for row in testQueryRes]\n\n        # comparing the differences\n        self.maxDiff = None\n        self.assertCountEqual(builderResList, testQueryResList)\n\n    def test_bigBuilder_2(self):\n        \"\"\"\n        Select all riders aged 25 or less who have finished in the top 15 of mountain races\n        with a summit finish in last two years\n        \"\"\"\n        # getting the builder's results for the given filters\n        curr_year = datetime.today().year\n        query_builder = queryBuilder()\n        builderRes = query_builder.bigBuilder(\n            [\n                {'table': 'race_info', 'column': 'year(date)', 'compare': '&gt;=', 'value': str(curr_year - 2)},\n                {'table': 'race_info', 'column': 'year(date)', 'compare': '&lt;=', 'value': str(curr_year)},\n                {'table': 'race_results', 'column': 'placement', 'compare': '&lt;=', 'value': '15'},\n                {'table': 'rider_info', 'column': 'age', 'compare': '&lt;=', 'value': '25'},\n                {'table': 'race_info', 'column': 'parcour_type', 'compare': '=', 'value': 'Mountains, uphill finish'}\n            ]\n        )\n        builderResList = [row[0] for row in builderRes]\n\n        # getting the results for an equivalent sql query\n        testQuery = f\"\"\"with\n            selected_races as (select race_url from race_info\n                                where parcour_type = \"Mountains, uphill finish\"\n                                and year(date) &lt;= {curr_year} and year(date) &gt;= {curr_year - 2}),\n            selected_results as (select rider_url from race_results\n                                where race_url in (select selected_races.race_url from selected_races)\n                                    and placement &lt;= 15)\n        select * from rider_info where rider_url in (select rider_url from selected_results)\n                                    and age &lt;= 25;\"\"\"\n        cursor = query_builder.cycling_db.cursor()\n        cursor.execute(testQuery)\n        testRes = cursor.fetchall()\n        testResList = [row[0] for row in testRes]\n\n        # comparing the differences\n        self.maxDiff = None\n        self.assertCountEqual(builderResList, testResList)\n\n    def testbigBuilder_3(self):\n        \"\"\"\n        Select riders who are currently on a Continental team who\n        have not been on a World Tour team in the past five years\n        \"\"\"\n        # getting the builder's results for the given filters\n        curr_year = datetime.today().year\n        query_builder = queryBuilder()\n        builderRes = query_builder.bigBuilder(\n            [\n                {'table': 'team_info', 'column': 'class', 'compare': '=', 'value': 'CTW'},\n                {'table': 'team_history', 'column': 'season', 'compare': '&gt;=', 'value': str(curr_year - 5), 'only_selected': False},\n                {'table': 'team_history', 'column': 'season', 'compare': '&lt;=', 'value': str(curr_year), 'only_selected': False},\n                {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'CTW', 'only_selected': True},\n                {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'CLUB', 'only_selected': True},\n                {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'UCI', 'only_selected': True},\n                {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'REG', 'only_selected': True},\n                {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'NCL', 'only_selected': True}\n            ]\n        )\n        builderResList = [row[0] for row in builderRes]\n\n        # getting the results for an equivalent sql query\n        testQuery = f\"\"\"with\n            selected_wtw_riders as (select rider_url from team_history\n                                 where class = 'WTW' and season &lt;= {curr_year} and season &gt;= {curr_year - 5}),\n            selected_conti_teams as (select team_url from team_info\n                                 where class = 'CTW'),\n            selected_curr_year_conti_riders as (select rider_url from rider_info\n                                 where current_team in (select selected_conti_teams.team_url from selected_conti_teams))\n        select * from selected_curr_year_conti_riders\n                                where rider_url not in (select selected_wtw_riders.rider_url from selected_wtw_riders);\"\"\"\n        cursor = query_builder.cycling_db.cursor()\n        cursor.execute(testQuery)\n        testRes = cursor.fetchall()\n        testResList = [row[0] for row in testRes]\n\n        # comparing the differences\n        self.maxDiff = None\n        self.assertCountEqual(builderResList, testResList)\n\n    def testbigBuilder_4(self):\n        \"\"\"\n        Select all riders under 21 who have finished in the top 30\n        of races classified as hilly and at the .WWT or .Pro level\n        in the past 2 years\n        \"\"\"\n        # getting the builder's results for the given filters\n        curr_year = datetime.today().year\n        query_builder = queryBuilder()\n        builderRes = query_builder.bigBuilder(\n            [\n                {'table': 'race_info', 'column': 'year(date)', 'compare': '&gt;=', 'value': str(curr_year - 2)},\n                {'table': 'race_info', 'column': 'year(date)', 'compare': '&lt;=', 'value': str(curr_year)},\n                {'table': 'race_results', 'column': 'placement', 'compare': '&lt;=', 'value': '30'},\n                {'table': 'rider_info', 'column': 'age', 'compare': '&lt;=', 'value': '20'},\n                {'table': 'race_info', 'column': 'class', 'compare': 'in', 'value': ('2.WWT', '1.WWT', '1.Pro', '2.Pro')},\n                {'table': 'race_info', 'column': 'parcour_type', 'compare': 'in', 'value': ('Hills, flat finish', 'Hills, uphill finish')}\n            ]\n        )\n        builderResList = [row[0] for row in builderRes]\n\n        # getting the results for an equivalent sql query\n        testQuery = f\"\"\"with\n            selected_races as (select race_url from race_info\n                                 where class in ('1.WWT', '2.WWT', '1.Pro', '2.Pro')\n                                    and parcour_type in ('Hills, flat finish', 'Hills, uphill finish')\n                                    and year(date) &lt;= {curr_year} and year(date) &gt;= {curr_year - 2}),\n            selected_race_results as (select rider_url from race_results\n                                 where placement &lt;= 30\n                                    and race_url in (select race_url from selected_races))\n            select * from rider_info where age &lt; 21 and rider_url in (select rider_url from selected_race_results);\"\"\"\n        cursor = query_builder.cycling_db.cursor()\n        cursor.execute(testQuery)\n        testRes = cursor.fetchall()\n        testResList = [row[0] for row in testRes]\n\n        # comparing the differences\n        self.maxDiff = None\n        self.assertCountEqual(builderResList, testResList)\n\n    def testbigBuilder_5(self):\n        \"\"\"\n        Select all Conti riders\n        who have finished in the Top 10 on general classification\n        in 2.Pro and 2.1 races in last two years\n        \"\"\"\n        # getting the builder's results for the given filters\n        curr_year = datetime.today().year\n        query_builder = queryBuilder()\n        builderRes = query_builder.bigBuilder(\n            [\n                {'table': 'race_info', 'column': 'year(date)', 'compare': '&gt;=', 'value': str(curr_year - 2)},\n                {'table': 'race_info', 'column': 'year(date)', 'compare': '&lt;=', 'value': str(curr_year)},\n                {'table': 'race_results', 'column': 'placement', 'compare': '&lt;=', 'value': '10'},\n                {'table': 'race_info', 'column': 'is_total_results_page', 'compare': '=', 'value': '1'},\n                {'table': 'race_info', 'column': 'class', 'compare': 'in', 'value': ('2.1', '2.Pro')},\n                {'table': 'team_info', 'column': 'class', 'compare': '=', 'value': 'CTW'}\n            ]\n        )\n        builderResList = [row[0] for row in builderRes]\n\n        # getting the results for an equivalent sql query\n        testQuery = f\"\"\"with\n                    selected_teams as (select team_url from team_info\n                                        where class = 'CTW'),\n                    selected_races as (select race_url from race_info\n                                         where class in ('2.Pro', '2.1')\n                                         and is_total_results_page = 1\n                                         and year(date) &lt;= {curr_year}\n                                         and year(date) &gt;= {curr_year - 2}),\n                    selected_race_results as (select rider_url from race_results\n                                            where placement &lt;= 10\n                                            and race_url in (select race_url from selected_races))\n                    select * from rider_info where rider_url in (select rider_url from selected_race_results)\n                                                and current_team in (select team_url from selected_teams);\"\"\"\n        cursor = query_builder.cycling_db.cursor()\n        cursor.execute(testQuery)\n        testRes = cursor.fetchall()\n        testResList = [row[0] for row in testRes]\n\n        # comparing the differences\n        self.maxDiff = None\n        self.assertCountEqual(builderResList, testResList)\n</code></pre>"},{"location":"queryBuilder_tests-reference/#queryBuilder_tests.Test_queryBuilder.test_bigBuilder_1","title":"<code>test_bigBuilder_1()</code>","text":"<p>Select all riders aged 23 or less who have finished in the top ten in 1.1 races with profile scores of 50 or greater in the past 4 years</p> Source code in <code>tests\\queryBuilder_tests.py</code> <pre><code>def test_bigBuilder_1(self):\n    \"\"\"\n    Select all riders aged 23 or less who have finished in the top ten in 1.1 races\n    with profile scores of 50 or greater\n    in the past 4 years\n    \"\"\"\n    # getting the builder's results for the given filters\n    curr_year = datetime.today().year\n    query_builder = queryBuilder()\n    builderRes = query_builder.bigBuilder(\n        [\n            {'table': 'race_info', 'column': 'year(date)', 'compare': '&gt;=', 'value': str(curr_year - 4)},\n            {'table': 'race_info', 'column': 'year(date)', 'compare': '&lt;=', 'value': str(curr_year)},\n            {'table': 'race_results', 'column': 'placement', 'compare': '&lt;=', 'value': '10'},\n            {'table': 'rider_info', 'column': 'age', 'compare': '&lt;=', 'value': '23'},\n            {'table': 'race_info', 'column': 'profile_score', 'compare': '&gt;=', 'value': '50'},\n            {'table': 'race_info', 'column': 'class', 'compare': '=', 'value': '1.1'}\n        ]\n    )\n    builderResList = [row[0] for row in builderRes]\n\n    # getting the results for an equivalent sql query\n    testQuery = f\"\"\"with\n        selected_races as (select race_url from race_info\n                                where class  = \"1.1\" and profile_score &gt;= 50\n                                and year(date) &gt;= {curr_year - 4} and year(date) &lt;= {curr_year}),\n        selected_results as (select rider_url from race_results\n                                where race_url in (select selected_races.race_url from selected_races)\n                                    and placement &lt;= 10)\n    select * from rider_info where rider_url in (select rider_url from selected_results)\n                                and age &lt;= 23;\"\"\"\n    cursor = query_builder.cycling_db.cursor()\n    cursor.execute(testQuery)\n    testQueryRes = cursor.fetchall()\n    testQueryResList = [row[0] for row in testQueryRes]\n\n    # comparing the differences\n    self.maxDiff = None\n    self.assertCountEqual(builderResList, testQueryResList)\n</code></pre>"},{"location":"queryBuilder_tests-reference/#queryBuilder_tests.Test_queryBuilder.test_bigBuilder_2","title":"<code>test_bigBuilder_2()</code>","text":"<p>Select all riders aged 25 or less who have finished in the top 15 of mountain races with a summit finish in last two years</p> Source code in <code>tests\\queryBuilder_tests.py</code> <pre><code>def test_bigBuilder_2(self):\n    \"\"\"\n    Select all riders aged 25 or less who have finished in the top 15 of mountain races\n    with a summit finish in last two years\n    \"\"\"\n    # getting the builder's results for the given filters\n    curr_year = datetime.today().year\n    query_builder = queryBuilder()\n    builderRes = query_builder.bigBuilder(\n        [\n            {'table': 'race_info', 'column': 'year(date)', 'compare': '&gt;=', 'value': str(curr_year - 2)},\n            {'table': 'race_info', 'column': 'year(date)', 'compare': '&lt;=', 'value': str(curr_year)},\n            {'table': 'race_results', 'column': 'placement', 'compare': '&lt;=', 'value': '15'},\n            {'table': 'rider_info', 'column': 'age', 'compare': '&lt;=', 'value': '25'},\n            {'table': 'race_info', 'column': 'parcour_type', 'compare': '=', 'value': 'Mountains, uphill finish'}\n        ]\n    )\n    builderResList = [row[0] for row in builderRes]\n\n    # getting the results for an equivalent sql query\n    testQuery = f\"\"\"with\n        selected_races as (select race_url from race_info\n                            where parcour_type = \"Mountains, uphill finish\"\n                            and year(date) &lt;= {curr_year} and year(date) &gt;= {curr_year - 2}),\n        selected_results as (select rider_url from race_results\n                            where race_url in (select selected_races.race_url from selected_races)\n                                and placement &lt;= 15)\n    select * from rider_info where rider_url in (select rider_url from selected_results)\n                                and age &lt;= 25;\"\"\"\n    cursor = query_builder.cycling_db.cursor()\n    cursor.execute(testQuery)\n    testRes = cursor.fetchall()\n    testResList = [row[0] for row in testRes]\n\n    # comparing the differences\n    self.maxDiff = None\n    self.assertCountEqual(builderResList, testResList)\n</code></pre>"},{"location":"queryBuilder_tests-reference/#queryBuilder_tests.Test_queryBuilder.testbigBuilder_3","title":"<code>testbigBuilder_3()</code>","text":"<p>Select riders who are currently on a Continental team who have not been on a World Tour team in the past five years</p> Source code in <code>tests\\queryBuilder_tests.py</code> <pre><code>def testbigBuilder_3(self):\n    \"\"\"\n    Select riders who are currently on a Continental team who\n    have not been on a World Tour team in the past five years\n    \"\"\"\n    # getting the builder's results for the given filters\n    curr_year = datetime.today().year\n    query_builder = queryBuilder()\n    builderRes = query_builder.bigBuilder(\n        [\n            {'table': 'team_info', 'column': 'class', 'compare': '=', 'value': 'CTW'},\n            {'table': 'team_history', 'column': 'season', 'compare': '&gt;=', 'value': str(curr_year - 5), 'only_selected': False},\n            {'table': 'team_history', 'column': 'season', 'compare': '&lt;=', 'value': str(curr_year), 'only_selected': False},\n            {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'CTW', 'only_selected': True},\n            {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'CLUB', 'only_selected': True},\n            {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'UCI', 'only_selected': True},\n            {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'REG', 'only_selected': True},\n            {'table': 'team_history', 'column': 'class', 'compare': '=', 'value': 'NCL', 'only_selected': True}\n        ]\n    )\n    builderResList = [row[0] for row in builderRes]\n\n    # getting the results for an equivalent sql query\n    testQuery = f\"\"\"with\n        selected_wtw_riders as (select rider_url from team_history\n                             where class = 'WTW' and season &lt;= {curr_year} and season &gt;= {curr_year - 5}),\n        selected_conti_teams as (select team_url from team_info\n                             where class = 'CTW'),\n        selected_curr_year_conti_riders as (select rider_url from rider_info\n                             where current_team in (select selected_conti_teams.team_url from selected_conti_teams))\n    select * from selected_curr_year_conti_riders\n                            where rider_url not in (select selected_wtw_riders.rider_url from selected_wtw_riders);\"\"\"\n    cursor = query_builder.cycling_db.cursor()\n    cursor.execute(testQuery)\n    testRes = cursor.fetchall()\n    testResList = [row[0] for row in testRes]\n\n    # comparing the differences\n    self.maxDiff = None\n    self.assertCountEqual(builderResList, testResList)\n</code></pre>"},{"location":"queryBuilder_tests-reference/#queryBuilder_tests.Test_queryBuilder.testbigBuilder_4","title":"<code>testbigBuilder_4()</code>","text":"<p>Select all riders under 21 who have finished in the top 30 of races classified as hilly and at the .WWT or .Pro level in the past 2 years</p> Source code in <code>tests\\queryBuilder_tests.py</code> <pre><code>def testbigBuilder_4(self):\n    \"\"\"\n    Select all riders under 21 who have finished in the top 30\n    of races classified as hilly and at the .WWT or .Pro level\n    in the past 2 years\n    \"\"\"\n    # getting the builder's results for the given filters\n    curr_year = datetime.today().year\n    query_builder = queryBuilder()\n    builderRes = query_builder.bigBuilder(\n        [\n            {'table': 'race_info', 'column': 'year(date)', 'compare': '&gt;=', 'value': str(curr_year - 2)},\n            {'table': 'race_info', 'column': 'year(date)', 'compare': '&lt;=', 'value': str(curr_year)},\n            {'table': 'race_results', 'column': 'placement', 'compare': '&lt;=', 'value': '30'},\n            {'table': 'rider_info', 'column': 'age', 'compare': '&lt;=', 'value': '20'},\n            {'table': 'race_info', 'column': 'class', 'compare': 'in', 'value': ('2.WWT', '1.WWT', '1.Pro', '2.Pro')},\n            {'table': 'race_info', 'column': 'parcour_type', 'compare': 'in', 'value': ('Hills, flat finish', 'Hills, uphill finish')}\n        ]\n    )\n    builderResList = [row[0] for row in builderRes]\n\n    # getting the results for an equivalent sql query\n    testQuery = f\"\"\"with\n        selected_races as (select race_url from race_info\n                             where class in ('1.WWT', '2.WWT', '1.Pro', '2.Pro')\n                                and parcour_type in ('Hills, flat finish', 'Hills, uphill finish')\n                                and year(date) &lt;= {curr_year} and year(date) &gt;= {curr_year - 2}),\n        selected_race_results as (select rider_url from race_results\n                             where placement &lt;= 30\n                                and race_url in (select race_url from selected_races))\n        select * from rider_info where age &lt; 21 and rider_url in (select rider_url from selected_race_results);\"\"\"\n    cursor = query_builder.cycling_db.cursor()\n    cursor.execute(testQuery)\n    testRes = cursor.fetchall()\n    testResList = [row[0] for row in testRes]\n\n    # comparing the differences\n    self.maxDiff = None\n    self.assertCountEqual(builderResList, testResList)\n</code></pre>"},{"location":"queryBuilder_tests-reference/#queryBuilder_tests.Test_queryBuilder.testbigBuilder_5","title":"<code>testbigBuilder_5()</code>","text":"<p>Select all Conti riders who have finished in the Top 10 on general classification in 2.Pro and 2.1 races in last two years</p> Source code in <code>tests\\queryBuilder_tests.py</code> <pre><code>def testbigBuilder_5(self):\n    \"\"\"\n    Select all Conti riders\n    who have finished in the Top 10 on general classification\n    in 2.Pro and 2.1 races in last two years\n    \"\"\"\n    # getting the builder's results for the given filters\n    curr_year = datetime.today().year\n    query_builder = queryBuilder()\n    builderRes = query_builder.bigBuilder(\n        [\n            {'table': 'race_info', 'column': 'year(date)', 'compare': '&gt;=', 'value': str(curr_year - 2)},\n            {'table': 'race_info', 'column': 'year(date)', 'compare': '&lt;=', 'value': str(curr_year)},\n            {'table': 'race_results', 'column': 'placement', 'compare': '&lt;=', 'value': '10'},\n            {'table': 'race_info', 'column': 'is_total_results_page', 'compare': '=', 'value': '1'},\n            {'table': 'race_info', 'column': 'class', 'compare': 'in', 'value': ('2.1', '2.Pro')},\n            {'table': 'team_info', 'column': 'class', 'compare': '=', 'value': 'CTW'}\n        ]\n    )\n    builderResList = [row[0] for row in builderRes]\n\n    # getting the results for an equivalent sql query\n    testQuery = f\"\"\"with\n                selected_teams as (select team_url from team_info\n                                    where class = 'CTW'),\n                selected_races as (select race_url from race_info\n                                     where class in ('2.Pro', '2.1')\n                                     and is_total_results_page = 1\n                                     and year(date) &lt;= {curr_year}\n                                     and year(date) &gt;= {curr_year - 2}),\n                selected_race_results as (select rider_url from race_results\n                                        where placement &lt;= 10\n                                        and race_url in (select race_url from selected_races))\n                select * from rider_info where rider_url in (select rider_url from selected_race_results)\n                                            and current_team in (select team_url from selected_teams);\"\"\"\n    cursor = query_builder.cycling_db.cursor()\n    cursor.execute(testQuery)\n    testRes = cursor.fetchall()\n    testResList = [row[0] for row in testRes]\n\n    # comparing the differences\n    self.maxDiff = None\n    self.assertCountEqual(builderResList, testResList)\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#examples","title":"Examples","text":"<p>For examples see queryBuilder_tests</p>"},{"location":"user_guide/#terminology","title":"Terminology","text":"<ul> <li><code>Start</code>: Year to begin from (inclusive). Used in conjunction with several other fields.</li> <li><code>End</code>: Year to stop at (inclusive). Used in conjunction with several other fields.</li> <li><code>Rank</code>: Filters riders based off their UCI rank (calculated by adding up UCI points) for a given season.</li> <li><code>Age</code>: Filters riders based off their age</li> <li><code>Placing</code>: Filters to riders who have participated in at least one race with the specified placing during the given time frame.</li> <li><code>Scored PCS Points</code>: Filters to riders who have scored the specified amount of PCS Points in at least one race in the given time frame.</li> <li><code>Scored UCI Points</code>: Filters to riders who have scored the specified amount of UCI Points in at least one race in the given time frame.</li> <li><code>PCS Points Trend</code>: Filters riders based off their PCS point trend in the given time frame--excluding  the current year.</li> <li><code>UCI Points Trend</code>: Filters riders based off their UCI point trend in the given time frame--excluding  the current year.</li> <li><code>General Classification</code>: Whether to include general classification races when filtering.</li> <li><code>Profile Score</code>: Filters to riders who have participated in at least one race with the specified profile score in the given time frame.</li> <li><code>Startlist Quality Score</code>: Filters to riders who have participated in at least one race with the specified startlist quality score in the given time frame.</li> <li><code>Current Team Classes</code>: Filters to riders whose current team class belongs to one of the selected classes. Hold Ctrl/Cmd to select multiple classes.</li> <li><code>Past Teams' Classes</code>: Filters to riders who were only on teams that belong to one of the selected classes in the given time frame. Hold Ctrl/Cmd to select multiple classes.</li> <li><code>Allow other Team Classes</code>: When checked, modifies the previous filter to now filter riders who were on at least one team with the specified classes in the given time frame.</li> <li><code>Race Classes</code>: Filters to riders who participated in at least one race that belongs to one of the selected classes. Hold Ctrl/Cmd to select multiple classes.</li> <li><code>Parcour Types</code>: Filters to riders who participated in at least one race whose parcour type belongs to one of the selected types. Hold Ctrl/Cmd to select multiple classes.</li> </ul>"}]}